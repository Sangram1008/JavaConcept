
Collection :- Group of Element Object and data into Single entity.
              Collection is an interface available in jav.util

1) ArrayList :- Java ArrayList class uses a dynamic array for storing the elements
                Is a class which is implemented by list Interface
                it can be resize.
                Different types of data Allowed.
                Insertion Order - Preserved(Index) like 0,1,2,3,4,5
                Duplicate Element Allowed.
                Multiple Null is Allowed.
                Single Dimensional.
                Use Size() to find Length.
                Use add() to add element.
                Use iterator to Iterate the array list.

                // Will use index to perform the action.
                1) add(100) -> add the 100 in List.
                2) size() -> Return the Size of the List.
                3) remove(1) -> Will Remove the index 1 value form the List.
                4) add(1,"San") -> 1 is Index & San is value at index 1.
                5) set(1,"Java") -> Replacing the index 1 with Java.
                6) isEmpty() -> if Empty then True else False.

2) HashSet  :-  Java HashSet class is used to create a collection that uses a hash table for storage.

                Java HashSet class:
                Used to create a collection that uses a hash table for storage.
                Implements the Set interface.
                Allows different types of data (heterogeneous elements).
                Insertion Order: Not preserved (indexing not followed).
                Duplicate Elements: Not allowed.
                Null Values: Only one null value is allowed

                Will Not follow index perform the action
                Will work on basics of the Value

                Iteration: You can iterate over a HashSet using an iterator or a for-each loop.
                Performance: HashSet provides constant-time performance for basic operations
                (like add, remove, contains, and size), assuming the hash function disperses the elements properly among the buckets.

                1) add(100): Adds the specified element to the set if it is not already present.
                   Example: hashSet.add(100); -> Adds 100 to the set.

                2) size(): Returns the number of elements in the set.
                   Example: hashSet.size(); -> Returns the size of the set.

                3) remove(Object o): Removes the specified element from the set if it is present.
                   Example: hashSet.remove(100); -> Removes 100 from the set.

                4) isEmpty(): Returns true if the set contains no elements.
                   Example: hashSet.isEmpty(); -> Returns true if the set is empty, otherwise false.

                5) Adding elements: Elements can be added using the add method. If the element is already present,
                   it will not be added again.

                6) Accessing Specific Values: Direct access by index is not possible as HashSet does not maintain any order.
                   However, you can use an iterator or convert it to an array or list for accessing specific elements indirectly.

1) HashMap :-  Stores elements in key-value pairs.
               Keys should be unique.
               Values can be duplicate.
               Insertion Order: Not preserved (indexing not followed).

               1) put(K key, V value): Associates the specified value with the specified key in the map.
                  If the map previously contained a mapping for the key, the old value is replaced.
                  Example: hashMap.put(1, "value1"); -> Adds a key-value pair to the map.

               2) get(Object key): Returns the value to which the specified key is mapped, or null if the map contains no mapping for the key.
                  Example: hashMap.get(1); -> Returns the value associated with key 1.

               3) remove(Object key): Removes the mapping for the specified key from this map if present.
                  Example: hashMap.remove(1); -> Removes the key-value pair associated with key 1.

               4) size(): Returns the number of key-value mappings in the map.
                  Example: hashMap.size(); -> Returns the size of the map.

               5) isEmpty(): Returns true if the map contains no key-value mappings.
                  Example: hashMap.isEmpty(); -> Returns true if the map is empty, otherwise false.

               6) containsKey(Object key): Returns true if this map contains a mapping for the specified key.
                  Example: hashMap.containsKey(1); -> Returns true if the map contains a mapping for key 1.

               7) containsValue(Object value): Returns true if this map maps one or more keys to the specified value.
                  Example: hashMap.containsValue("value1"); -> Returns true if the map contains the specified value.
